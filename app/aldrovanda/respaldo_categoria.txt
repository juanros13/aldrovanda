class Category(models.Model):
    name = models.CharField(max_length=200)
    slug = models.SlugField()
    parent = models.ForeignKey('self', blank=True, null=True, related_name='child')
    description = models.TextField(blank=True,help_text="Optional")
    
    class Admin:
        list_display = ('name', '_parents_repr')
    
    def __unicode__(self):
        p_list = self._recurse_for_parents(self)
        p_list.append(self.name)
        return self.get_separator().join(p_list)
    
    def get_absolute_url(self):
    	p_list = self._recurse_for_parents_slug(self)
        p_list.append(self.slug)
        if self.parent_id:
            return "/categoria/%s/" % (self.get_separator_slug().join(p_list))
        else:
            return "/categoria/%s/" % (self.slug)

    def get_categories_with_links(self):
    	p_list = self._recurse_for_parents_objects(self)
    	categories_with_links=''

        for category in p_list:
       		categories_with_links='>><a href="'+category.name+'" >'+category.name+'</a>'
        return categories_with_links

    def _recurse_for_parents(self, cat_obj):
        p_list = []
        if cat_obj.parent_id:
            p = cat_obj.parent
            p_list.append(p.name)
            more = self._recurse_for_parents(p)
            p_list.extend(more)
        if cat_obj == self and p_list:
            p_list.reverse()
        return p_list

    def _recurse_for_parents_slug(self, cat_obj):
        p_list = []
        if cat_obj.parent_id:
            p = cat_obj.parent
            p_list.append(p.slug)
            more = self._recurse_for_parents_slug(p)
            p_list.extend(more)
        if cat_obj == self and p_list:
            p_list.reverse()
        return p_list
    

    def _recurse_for_parents_objects(self, cat_obj):
        p_list = []
        if cat_obj.parent_id:
            p = cat_obj.parent
            p_list.append(p)
            more = self._recurse_for_parents_slug(p)
            p_list.extend(more)
        if cat_obj == self and p_list:
            p_list.reverse()
        return p_list
            
    def get_separator(self):
           return ' :: '

    def get_separator_slug(self):
           return '/'
    
    def _parents_repr(self):
        p_list = self._recurse_for_parents(self)
        return self.get_separator().join(p_list)
    _parents_repr.short_description = "Tag parents"
    
    def save(self):
        p_list = self._recurse_for_parents(self)
        if self.name in p_list:
            raise validators.ValidationError("You must not save a category in itself!")
        super(Category, self).save()
    class Meta:
		verbose_name = 'Categoria'
		verbose_name_plural = 'Categorias'